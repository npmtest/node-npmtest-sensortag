{"/home/travis/build/npmtest/node-npmtest-sensortag/test.js":"/* istanbul instrument in package npmtest_sensortag */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sensortag/lib.npmtest_sensortag.js":"/* istanbul instrument in package npmtest_sensortag */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sensortag = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sensortag = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sensortag/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sensortag && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sensortag */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sensortag\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sensortag.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sensortag.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sensortag.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sensortag.__dirname +\n                    '/lib.npmtest_sensortag.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sensortag/node_modules/sensortag/index.js":"module.exports = require('./lib/sensortag');\n","/home/travis/build/npmtest/node-npmtest-sensortag/node_modules/sensortag/lib/sensortag.js":"var CC2540SensorTag = require('./cc2540');\nvar CC2650SensorTag = require('./cc2650');\n\nvar SensorTag = function() {\n};\n\nSensorTag.discoverAll = function(onDiscover) {\n  CC2540SensorTag.discoverAll(onDiscover);\n  CC2650SensorTag.discoverAll(onDiscover);\n};\n\nSensorTag.stopDiscoverAll = function(onDiscover) {\n  CC2540SensorTag.stopDiscoverAll(onDiscover);\n  CC2650SensorTag.stopDiscoverAll(onDiscover);\n};\n\nSensorTag.discover = function(callback) {\n  var onDiscover = function(sensorTag) {\n    SensorTag.stopDiscoverAll(onDiscover);\n\n    callback(sensorTag);\n  };\n\n  SensorTag.discoverAll(onDiscover);\n};\n\nSensorTag.discoverByAddress = function(address, callback) {\n  address = address.toLowerCase();\n\n  var onDiscoverByAddress = function(sensorTag) {\n    if (sensorTag._peripheral.address === address) {\n      SensorTag.stopDiscoverAll(onDiscoverByAddress);\n\n      callback(sensorTag);\n    }\n  };\n\n  SensorTag.discoverAll(onDiscoverByAddress);\n};\n\nSensorTag.discoverById = function(id, callback) {\n  var onDiscoverById = function(sensorTag) {\n    if (sensorTag.id === id) {\n      SensorTag.stopDiscoverAll(onDiscoverById);\n\n      callback(sensorTag);\n    }\n  };\n\n  SensorTag.discoverAll(onDiscoverById);\n};\n\n// deprecated\nSensorTag.discoverByUuid = function(uuid, callback) {\n  var onDiscoverByUuid = function(sensorTag) {\n    if (sensorTag.uuid === uuid) {\n      SensorTag.stopDiscoverAll(onDiscoverByUuid);\n\n      callback(sensorTag);\n    }\n  };\n\n  SensorTag.discoverAll(onDiscoverByUuid);\n};\n\nSensorTag.CC2540 = CC2540SensorTag;\nSensorTag.CC2650 = CC2650SensorTag;\n\nmodule.exports = SensorTag;\n","/home/travis/build/npmtest/node-npmtest-sensortag/node_modules/sensortag/lib/cc2540.js":"var NobleDevice = require('noble-device');\n\nvar Common = require('./common');\n\nvar ACCELEROMETER_UUID                      = 'f000aa1004514000b000000000000000';\nvar MAGNETOMETER_UUID                       = 'f000aa3004514000b000000000000000';\nvar GYROSCOPE_UUID                          = 'f000aa5004514000b000000000000000';\nvar BAROMETRIC_PRESSURE_UUID                = 'f000aa4004514000b000000000000000';\nvar TEST_UUID                               = 'f000aa6004514000b000000000000000';\nvar OAD_UUID                                = 'f000ffc004514000b000000000000000';\n\nvar ACCELEROMETER_CONFIG_UUID               = 'f000aa1204514000b000000000000000';\nvar ACCELEROMETER_DATA_UUID                 = 'f000aa1104514000b000000000000000';\nvar ACCELEROMETER_PERIOD_UUID               = 'f000aa1304514000b000000000000000';\n\nvar MAGNETOMETER_CONFIG_UUID                = 'f000aa3204514000b000000000000000';\nvar MAGNETOMETER_DATA_UUID                  = 'f000aa3104514000b000000000000000';\nvar MAGNETOMETER_PERIOD_UUID                = 'f000aa3304514000b000000000000000';\n\nvar BAROMETRIC_PRESSURE_CONFIG_UUID         = 'f000aa4204514000b000000000000000';\nvar BAROMETRIC_PRESSURE_CALIBRATION_UUID    = 'f000aa4304514000b000000000000000';\n\nvar GYROSCOPE_CONFIG_UUID                   = 'f000aa5204514000b000000000000000';\nvar GYROSCOPE_DATA_UUID                     = 'f000aa5104514000b000000000000000';\nvar GYROSCOPE_PERIOD_UUID                   = 'f000aa5304514000b000000000000000';\n\nvar TEST_DATA_UUID                          = 'f000aa6104514000b000000000000000';\nvar TEST_CONFIGURATION_UUID                 = 'f000aa6204514000b000000000000000';\n\nvar CC2540SensorTag = function(peripheral) {\n  NobleDevice.call(this, peripheral);\n  Common.call(this);\n\n  this.type = 'cc2540';\n\n  this.onAccelerometerChangeBinded      = this.onAccelerometerChange.bind(this);\n  this.onMagnetometerChangeBinded       = this.onMagnetometerChange.bind(this);\n  this.onGyroscopeChangeBinded          = this.onGyroscopeChange.bind(this);\n};\n\nCC2540SensorTag.is = function(peripheral) {\n  var localName = peripheral.advertisement.localName;\n\n  return (localName === 'SensorTag') ||\n          (localName === 'TI BLE Sensor Tag');\n};\n\nNobleDevice.Util.inherits(CC2540SensorTag, NobleDevice);\nNobleDevice.Util.mixin(CC2540SensorTag, NobleDevice.DeviceInformationService);\nNobleDevice.Util.mixin(CC2540SensorTag, Common);\n\nCC2540SensorTag.prototype.convertIrTemperatureData = function(data, callback) {\n  // For computation refer :  http://processors.wiki.ti.com/index.php/SensorTag_User_Guide#IR_Temperature_Sensor\n\n  var ambientTemperature = data.readInt16LE(2) / 128.0;\n\n  var Vobj2 = data.readInt16LE(0) * 0.00000015625;\n  var Tdie2 = ambientTemperature + 273.15;\n  var S0 = 5.593 * Math.pow(10, -14);\n  var a1 = 1.75 * Math.pow(10 , -3);\n  var a2 = -1.678 * Math.pow(10, -5);\n  var b0 = -2.94 * Math.pow(10, -5);\n  var b1 = -5.7 * Math.pow(10, -7);\n  var b2 = 4.63 * Math.pow(10, -9);\n  var c2 = 13.4;\n  var Tref = 298.15;\n  var S = S0 * (1 + a1 * (Tdie2 - Tref) + a2 * Math.pow((Tdie2 - Tref), 2));\n  var Vos = b0 + b1 * (Tdie2 - Tref) + b2 * Math.pow((Tdie2 - Tref), 2);\n  var fObj = (Vobj2 - Vos) + c2 * Math.pow((Vobj2 - Vos), 2);\n  var objectTemperature = Math.pow(Math.pow(Tdie2, 4) + (fObj/S), 0.25);\n  objectTemperature = (objectTemperature - 273.15);\n\n  callback(objectTemperature, ambientTemperature);\n};\n\nCC2540SensorTag.prototype.convertHumidityData = function(data, callback) {\n  var temperature = -46.85 + 175.72 / 65536.0 * data.readUInt16LE(0);\n  var humidity = -6.0 + 125.0 / 65536.0 * (data.readUInt16LE(2) & ~0x0003);\n\n  callback(temperature, humidity);\n};\n\nCC2540SensorTag.prototype.enableBarometricPressure = function(callback) {\n  this.writeUInt8Characteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_CONFIG_UUID, 0x02, function(error) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.readDataCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_CALIBRATION_UUID, function(error, data) {\n      if (error) {\n        return callback(error);\n      }\n\n      this._barometricPressureCalibrationData = data;\n\n      this.enableConfigCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_CONFIG_UUID, callback);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.convertBarometricPressureData = function(data, callback) {\n\n  // For computation refer :  http://processors.wiki.ti.com/index.php/SensorTag_User_Guide#Barometric_Pressure_Sensor_2\n  var temp;     // Temperature raw value from sensor\n  var pressure; // Pressure raw value from sensor\n  var S;        // Interim value in calculation\n  var O;        // Interim value in calculation\n  var p_a;      // Pressure actual value in unit Pascal.\n  var Pa;       // Computed value of the function\n\n  var c0 = this._barometricPressureCalibrationData.readUInt16LE(0);\n  var c1 = this._barometricPressureCalibrationData.readUInt16LE(2);\n  var c2 = this._barometricPressureCalibrationData.readUInt16LE(4);\n  var c3 = this._barometricPressureCalibrationData.readUInt16LE(6);\n\n  var c4 = this._barometricPressureCalibrationData.readInt16LE(8);\n  var c5 = this._barometricPressureCalibrationData.readInt16LE(10);\n  var c6 = this._barometricPressureCalibrationData.readInt16LE(12);\n  var c7 = this._barometricPressureCalibrationData.readInt16LE(14);\n\n  temp = data.readInt16LE(0);\n  pressure = data.readUInt16LE(2);\n\n  S = c2 + ((c3 * temp)/ 131072.0) + ((c4 * (temp * temp)) / 17179869184.0);\n  O = (c5 * 16384.0) + (((c6 * temp) / 8)) + ((c7 * (temp * temp)) / 524288.0);\n  Pa = (((S * pressure) + O) / 16384.0);\n\n  Pa /= 100.0;\n\n  callback(Pa);\n};\n\nCC2540SensorTag.prototype.enableAccelerometer = function(callback) {\n  this.enableConfigCharacteristic(ACCELEROMETER_UUID, ACCELEROMETER_CONFIG_UUID, callback);\n};\n\nCC2540SensorTag.prototype.disableAccelerometer = function(callback) {\n  this.disableConfigCharacteristic(ACCELEROMETER_UUID, ACCELEROMETER_CONFIG_UUID, callback);\n};\n\nCC2540SensorTag.prototype.readAccelerometer  = function(callback) {\n  this.readDataCharacteristic(ACCELEROMETER_UUID, ACCELEROMETER_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertAccelerometerData(data, function(x, y, z) {\n      callback(null, x, y, z);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.onAccelerometerChange = function(data) {\n  this.convertAccelerometerData(data, function(x, y, z) {\n    this.emit('accelerometerChange', x, y, z);\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.convertAccelerometerData = function(data, callback) {\n  var x = data.readInt8(0) / 16.0;\n  var y = data.readInt8(1) / 16.0;\n  var z = data.readInt8(2) / 16.0;\n\n  callback(x, y, z);\n};\n\nCC2540SensorTag.prototype.notifyAccelerometer = function(callback) {\n  this.notifyCharacteristic(ACCELEROMETER_UUID, ACCELEROMETER_DATA_UUID, true, this.onAccelerometerChangeBinded, callback);\n};\n\nCC2540SensorTag.prototype.unnotifyAccelerometer = function(callback) {\n  this.notifyCharacteristic(ACCELEROMETER_UUID, ACCELEROMETER_DATA_UUID, false, this.onAccelerometerChangeBinded, callback);\n};\n\nCC2540SensorTag.prototype.setAccelerometerPeriod = function(period, callback) {\n  this.writePeriodCharacteristic(ACCELEROMETER_UUID, ACCELEROMETER_PERIOD_UUID, period, callback);\n};\n\nCC2540SensorTag.prototype.enableMagnetometer = function(callback) {\n  this.enableConfigCharacteristic(MAGNETOMETER_UUID, MAGNETOMETER_CONFIG_UUID, callback);\n};\n\nCC2540SensorTag.prototype.disableMagnetometer = function(callback) {\n  this.disableConfigCharacteristic(MAGNETOMETER_UUID, MAGNETOMETER_CONFIG_UUID, callback);\n};\n\nCC2540SensorTag.prototype.readMagnetometer = function(callback) {\n  this.readDataCharacteristic(MAGNETOMETER_UUID, MAGNETOMETER_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertMagnetometerData(data, function(x, y, z) {\n      callback(null, x, y, z);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.onMagnetometerChange = function(data) {\n  this.convertMagnetometerData(data, function(x, y, z) {\n    this.emit('magnetometerChange', x, y, z);\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.convertMagnetometerData = function(data, callback) {\n  var x = data.readInt16LE(0) * 2000.0 / 65536.0;\n  var y = data.readInt16LE(2) * 2000.0 / 65536.0;\n  var z = data.readInt16LE(4) * 2000.0 / 65536.0;\n\n  callback(x, y, z);\n};\n\nCC2540SensorTag.prototype.notifyMagnetometer = function(callback) {\n  this.notifyCharacteristic(MAGNETOMETER_UUID, MAGNETOMETER_DATA_UUID, true, this.onMagnetometerChangeBinded, callback);\n};\n\nCC2540SensorTag.prototype.unnotifyMagnetometer = function(callback) {\n  this.notifyCharacteristic(MAGNETOMETER_UUID, MAGNETOMETER_DATA_UUID, false, this.onMagnetometerChangeBinded, callback);\n};\n\nCC2540SensorTag.prototype.setMagnetometerPeriod = function(period, callback) {\n  this.writePeriodCharacteristic(MAGNETOMETER_UUID, MAGNETOMETER_PERIOD_UUID, period, callback);\n};\n\nCC2540SensorTag.prototype.setGyroscopePeriod = function(period, callback) {\n  this.writePeriodCharacteristic(GYROSCOPE_UUID, GYROSCOPE_PERIOD_UUID, period, callback);\n};\n\nCC2540SensorTag.prototype.enableGyroscope = function(callback) {\n  this.writeUInt8Characteristic(GYROSCOPE_UUID, GYROSCOPE_CONFIG_UUID, 0x07, callback);\n};\n\nCC2540SensorTag.prototype.disableGyroscope = function(callback) {\n  this.disableConfigCharacteristic(GYROSCOPE_UUID, GYROSCOPE_CONFIG_UUID, callback);\n};\n\nCC2540SensorTag.prototype.readGyroscope = function(callback) {\n  this.readDataCharacteristic(GYROSCOPE_UUID, GYROSCOPE_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertGyroscopeData(data, function(x, y, z) {\n      callback(null, x, y, z);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.onGyroscopeChange = function(data) {\n  this.convertGyroscopeData(data, function(x, y, z) {\n    this.emit('gyroscopeChange', x, y, z);\n  }.bind(this));\n};\n\nCC2540SensorTag.prototype.convertGyroscopeData = function(data, callback) {\n  var x = data.readInt16LE(0) * (500.0 / 65536.0) * -1;\n  var y = data.readInt16LE(2) * (500.0 / 65536.0);\n  var z = data.readInt16LE(4) * (500.0 / 65536.0);\n\n  callback(x, y, z);\n};\n\nCC2540SensorTag.prototype.notifyGyroscope = function(callback) {\n  this.notifyCharacteristic(GYROSCOPE_UUID, GYROSCOPE_DATA_UUID, true, this.onGyroscopeChangeBinded, callback);\n};\n\nCC2540SensorTag.prototype.unnotifyGyroscope = function(callback) {\n  this.notifyCharacteristic(GYROSCOPE_UUID, GYROSCOPE_DATA_UUID, false, this.onGyroscopeChangeBinded, callback);\n};\n\nCC2540SensorTag.prototype.readTestData = function(callback) {\n  this.readUInt16LECharacteristic(TEST_UUID, TEST_DATA_UUID, callback);\n};\n\nCC2540SensorTag.prototype.readTestConfiguration = function(callback) {\n  this.readUInt8Characteristic(TEST_UUID, TEST_CONFIGURATION_UUID, callback);\n};\n\nmodule.exports = CC2540SensorTag;\n","/home/travis/build/npmtest/node-npmtest-sensortag/node_modules/sensortag/lib/common.js":"// http://processors.wiki.ti.com/index.php/SensorTag_User_Guide\n\nvar IR_TEMPERATURE_UUID                     = 'f000aa0004514000b000000000000000';\nvar HUMIDITY_UUID                           = 'f000aa2004514000b000000000000000';\nvar BAROMETRIC_PRESSURE_UUID                = 'f000aa4004514000b000000000000000';\nvar SIMPLE_KEY_UUID                         = 'ffe0';\n\nvar IR_TEMPERATURE_CONFIG_UUID              = 'f000aa0204514000b000000000000000';\nvar IR_TEMPERATURE_DATA_UUID                = 'f000aa0104514000b000000000000000';\nvar IR_TEMPERATURE_PERIOD_UUID              = 'f000aa0304514000b000000000000000';\n\nvar HUMIDITY_CONFIG_UUID                    = 'f000aa2204514000b000000000000000';\nvar HUMIDITY_DATA_UUID                      = 'f000aa2104514000b000000000000000';\nvar HUMIDITY_PERIOD_UUID                    = 'f000aa2304514000b000000000000000';\n\nvar BAROMETRIC_PRESSURE_CONFIG_UUID         = 'f000aa4204514000b000000000000000';\nvar BAROMETRIC_PRESSURE_DATA_UUID           = 'f000aa4104514000b000000000000000';\nvar BAROMETRIC_PRESSURE_PERIOD_UUID         = 'f000aa4404514000b000000000000000';\n\nvar SIMPLE_KEY_DATA_UUID                    = 'ffe1';\n\nfunction SensorTagCommon() {\n  this.onIrTemperatureChangeBinded      = this.onIrTemperatureChange.bind(this);\n  this.onHumidityChangeBinded           = this.onHumidityChange.bind(this);\n  this.onBarometricPressureChangeBinded = this.onBarometricPressureChange.bind(this);\n  this.onSimpleKeyChangeBinded          = this.onSimpleKeyChange.bind(this);\n}\n\nSensorTagCommon.prototype.toString = function() {\n  return JSON.stringify({\n    id: this.id,\n    type: this.type\n  });\n};\n\nSensorTagCommon.prototype.writePeriodCharacteristic = function(serviceUuid, characteristicUuid, period, callback) {\n  period /= 10; // input is scaled by units of 10ms\n\n  if (period < 1) {\n    period = 1;\n  } else if (period > 255) {\n    period = 255;\n  }\n\n  this.writeUInt8Characteristic(serviceUuid, characteristicUuid, period, callback);\n};\n\nSensorTagCommon.prototype.enableConfigCharacteristic = function(serviceUuid, characteristicUuid, callback) {\n  this.writeUInt8Characteristic(serviceUuid, characteristicUuid, 0x01, callback);\n};\n\nSensorTagCommon.prototype.disableConfigCharacteristic = function(serviceUuid, characteristicUuid, callback) {\n  this.writeUInt8Characteristic(serviceUuid, characteristicUuid, 0x00, callback);\n};\n\nSensorTagCommon.prototype.setIrTemperaturePeriod = function(period, callback) {\n  this.writePeriodCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_PERIOD_UUID, period, callback);\n};\n\nSensorTagCommon.prototype.enableIrTemperature = function(callback) {\n  this.enableConfigCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_CONFIG_UUID, callback);\n};\n\nSensorTagCommon.prototype.disableIrTemperature = function(callback) {\n  this.disableConfigCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_CONFIG_UUID, callback);\n};\n\nSensorTagCommon.prototype.readIrTemperature = function(callback) {\n  this.readDataCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertIrTemperatureData(data, function(objectTemperature, ambientTemperature) {\n      callback(null, objectTemperature, ambientTemperature);\n    }.bind(this));\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.onIrTemperatureChange = function(data) {\n  this.convertIrTemperatureData(data, function(objectTemperature, ambientTemperature) {\n    this.emit('irTemperatureChange', objectTemperature, ambientTemperature);\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.notifyIrTemperature = function(callback) {\n  this.notifyCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_DATA_UUID, true, this.onIrTemperatureChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.unnotifyIrTemperature = function(callback) {\n  this.notifyCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_DATA_UUID, false, this.onIrTemperatureChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.setIrTemperaturePeriod = function(period, callback) {\n  this.writePeriodCharacteristic(IR_TEMPERATURE_UUID, IR_TEMPERATURE_PERIOD_UUID, period, callback);\n};\n\nSensorTagCommon.prototype.setHumidityPeriod = function(period, callback) {\n  this.writePeriodCharacteristic(HUMIDITY_UUID, HUMIDITY_PERIOD_UUID, period, callback);\n};\n\nSensorTagCommon.prototype.enableHumidity = function(callback) {\n  this.enableConfigCharacteristic(HUMIDITY_UUID, HUMIDITY_CONFIG_UUID, callback);\n};\n\nSensorTagCommon.prototype.disableHumidity = function(callback) {\n  this.disableConfigCharacteristic(HUMIDITY_UUID, HUMIDITY_CONFIG_UUID, callback);\n};\n\nSensorTagCommon.prototype.readHumidity = function(callback) {\n  this.readDataCharacteristic(HUMIDITY_UUID, HUMIDITY_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertHumidityData(data, function(temperature, humidity) {\n      callback(null, temperature, humidity);\n    });\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.onHumidityChange = function(data) {\n  this.convertHumidityData(data, function(temperature, humidity) {\n    this.emit('humidityChange', temperature, humidity);\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.notifyHumidity = function(callback) {\n  this.notifyCharacteristic(HUMIDITY_UUID, HUMIDITY_DATA_UUID, true, this.onHumidityChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.unnotifyHumidity = function(callback) {\n  this.notifyCharacteristic(HUMIDITY_UUID, HUMIDITY_DATA_UUID, false, this.onHumidityChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.setBarometricPressurePeriod = function(period, callback) {\n  this.writePeriodCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_PERIOD_UUID, period, callback);\n};\n\nSensorTagCommon.prototype.disableBarometricPressure = function(callback) {\n  this.disableConfigCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_CONFIG_UUID, callback);\n};\n\nSensorTagCommon.prototype.readBarometricPressure = function(callback) {\n  this.readDataCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertBarometricPressureData(data, function(pressure) {\n      callback(null, pressure);\n    }.bind(this));\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.onBarometricPressureChange = function(data) {\n  this.convertBarometricPressureData(data, function(pressure) {\n    this.emit('barometricPressureChange', pressure);\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.notifyBarometricPressure = function(callback) {\n  this.notifyCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_DATA_UUID, true, this.onBarometricPressureChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.unnotifyBarometricPressure = function(callback) {\n  this.notifyCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_DATA_UUID, false, this.onBarometricPressureChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.onSimpleKeyChange = function(data) {\n  this.convertSimpleKeyData(data, function(/*left, right, ...*/) {\n    var emitArguments = Array.prototype.slice.call(arguments);\n    emitArguments.unshift('simpleKeyChange');\n\n    this.emit.apply(this, emitArguments);\n  }.bind(this));\n};\n\nSensorTagCommon.prototype.convertSimpleKeyData = function(data, callback) {\n  var b = data.readUInt8(0);\n\n  var left = (b & 0x2) ? true : false;\n  var right = (b & 0x1) ? true : false;\n\n  callback(left, right);\n};\n\nSensorTagCommon.prototype.notifySimpleKey = function(callback) {\n  this.notifyCharacteristic(SIMPLE_KEY_UUID, SIMPLE_KEY_DATA_UUID, true, this.onSimpleKeyChangeBinded, callback);\n};\n\nSensorTagCommon.prototype.unnotifySimpleKey = function(callback) {\n  this.notifyCharacteristic(SIMPLE_KEY_UUID, SIMPLE_KEY_DATA_UUID, false, this.onSimpleKeyChangeBinded, callback);\n};\n\nmodule.exports = SensorTagCommon;\n","/home/travis/build/npmtest/node-npmtest-sensortag/node_modules/sensortag/lib/cc2650.js":"// http://processors.wiki.ti.com/index.php/CC2650_SensorTag_User's_Guide\n\nvar NobleDevice = require('noble-device');\n\nvar Common = require('./common');\n\nvar MPU9250_UUID                            = 'f000aa8004514000b000000000000000';\nvar BAROMETRIC_PRESSURE_UUID                = 'f000aa4004514000b000000000000000';\nvar IO_UUID                                 = 'f000aa6404514000b000000000000000';\nvar LUXOMETER_UUID                          = 'f000aa7004514000b000000000000000';\n\nvar BAROMETRIC_PRESSURE_CONFIG_UUID         = 'f000aa4204514000b000000000000000';\n\nvar MPU9250_CONFIG_UUID                     = 'f000aa8204514000b000000000000000';\nvar MPU9250_DATA_UUID                       = 'f000aa8104514000b000000000000000';\nvar MPU9250_PERIOD_UUID                     = 'f000aa8304514000b000000000000000';\n\nvar MPU9250_GYROSCOPE_MASK                  = 0x0007;\nvar MPU9250_ACCELEROMETER_MASK              = 0x0238;\nvar MPU9250_MAGNETOMETER_MASK               = 0x0040;\n\nvar IO_DATA_UUID                            = 'f000aa6504514000b000000000000000';\nvar IO_CONFIG_UUID                          = 'f000aa6604514000b000000000000000';\n\nvar LUXOMETER_CONFIG_UUID                   = 'f000aa7204514000b000000000000000';\nvar LUXOMETER_DATA_UUID                     = 'f000aa7104514000b000000000000000';\nvar LUXOMETER_PERIOD_UUID                   = 'f000aa7304514000b000000000000000';\n\nvar CC2650SensorTag = function(peripheral) {\n  NobleDevice.call(this, peripheral);\n  Common.call(this);\n\n  this.type = 'cc2650';\n  this.mpu9250mask = 0;\n  this.mpu9250notifyCount = 0;\n\n  this.onMPU9250ChangeBinded     = this.onMPU9250Change.bind(this);\n  this.onLuxometerChangeBinded   = this.onLuxometerChange.bind(this);\n};\n\nCC2650SensorTag.is = function(peripheral) {\n  var localName = peripheral.advertisement.localName;\n  var serviceUuids = peripheral.advertisement.serviceUuids;\n\n  return (localName === 'CC2650 SensorTag') || (localName === 'SensorTag 2.0') || (serviceUuids.indexOf('aa80') > -1 );\n};\n\nNobleDevice.Util.inherits(CC2650SensorTag, NobleDevice);\nNobleDevice.Util.mixin(CC2650SensorTag, NobleDevice.DeviceInformationService);\nNobleDevice.Util.mixin(CC2650SensorTag, Common);\nNobleDevice.Util.mixin(CC2650SensorTag, NobleDevice.BatteryService);\n\n\nCC2650SensorTag.prototype.convertIrTemperatureData = function(data, callback) {\n  var ambientTemperature = data.readInt16LE(2) / 128.0;\n  var objectTemperature = data.readInt16LE(0) / 128.0;\n\n  callback(objectTemperature, ambientTemperature);\n};\n\nCC2650SensorTag.prototype.convertHumidityData = function(data, callback) {\n  var temperature = -40 + ((165  * data.readUInt16LE(0)) / 65536.0);\n  var humidity = data.readUInt16LE(2) * 100 / 65536.0;\n\n  callback(temperature, humidity);\n};\n\nCC2650SensorTag.prototype.enableBarometricPressure = function(callback) {\n  this.enableConfigCharacteristic(BAROMETRIC_PRESSURE_UUID, BAROMETRIC_PRESSURE_CONFIG_UUID, callback);\n};\n\nCC2650SensorTag.prototype.convertBarometricPressureData = function(data, callback) {\n  // data is returned as\n  // Firmare 0.89 16 bit single precision float\n  // Firmare 1.01 24 bit single precision float\n\n  var flTempBMP;\n  var flPressure;\n\n  if (data.length > 4) {\n    // Firmware 1.01\n\n    flTempBMP = (data.readUInt32LE(0) & 0x00ffffff)/ 100.0;\n    flPressure = ((data.readUInt32LE(2) >> 8) & 0x00ffffff) / 100.0;\n  } else {\n    // Firmware 0.89\n\n    var tempBMP = data.readUInt16LE(0);\n    var tempExponent = (tempBMP & 0xF000) >> 12;\n    var tempMantissa = (tempBMP & 0x0FFF);\n    flTempBMP = tempMantissa * Math.pow(2, tempExponent) / 100.0;\n\n    var tempPressure = data.readUInt16LE(2);\n    var pressureExponent = (tempPressure & 0xF000) >> 12;\n    var pressureMantissa = (tempPressure & 0x0FFF);\n    flPressure = pressureMantissa * Math.pow(2, pressureExponent) / 100.0;\n  }\n\n  callback(flPressure);\n};\n\nCC2650SensorTag.prototype.setMPU9250Period = function(period, callback) {\n  this.writePeriodCharacteristic(MPU9250_UUID, MPU9250_PERIOD_UUID, period, callback);\n};\n\nCC2650SensorTag.prototype.enableMPU9250 = function(mask, callback) {\n  this.mpu9250mask |= mask;\n\n  // for now, always write 0x007f, magnetometer does not seem to notify is specific mask is used\n  this.writeUInt16LECharacteristic(MPU9250_UUID, MPU9250_CONFIG_UUID, 0x007f, callback);\n};\n\nCC2650SensorTag.prototype.disableMPU9250 = function(mask, callback) {\n  this.mpu9250mask &= ~mask;\n\n  if (this.mpu9250mask === 0) {\n    this.writeUInt16LECharacteristic(MPU9250_UUID, MPU9250_CONFIG_UUID, 0x0000, callback);\n  } else if (typeof(callback) === 'function') {\n    callback();\n  }\n};\n\nCC2650SensorTag.prototype.notifyMPU9250 = function(callback) {\n  this.mpu9250notifyCount++;\n\n  if (this.mpu9250notifyCount === 1) {\n    this.notifyCharacteristic(MPU9250_UUID, MPU9250_DATA_UUID, true, this.onMPU9250ChangeBinded, callback);\n  } else if (typeof(callback) === 'function') {\n    callback();\n  }\n};\n\nCC2650SensorTag.prototype.unnotifyMPU9250 = function(callback) {\n  this.mpu9250notifyCount--;\n\n  if (this.mpu9250notifyCount === 0) {\n    this.notifyCharacteristic(MPU9250_UUID, MPU9250_DATA_UUID, false, this.onMPU9250ChangeBinded, callback);\n  } else if (typeof(callback) === 'function') {\n    callback();\n  }\n};\n\nCC2650SensorTag.prototype.enableAccelerometer = function(callback) {\n  this.enableMPU9250(MPU9250_ACCELEROMETER_MASK, callback);\n};\n\nCC2650SensorTag.prototype.disableAccelerometer = function(callback) {\n  this.disableMPU9250(MPU9250_ACCELEROMETER_MASK, callback);\n};\n\nCC2650SensorTag.prototype.readAccelerometer  = function(callback) {\n  this.readDataCharacteristic(MPU9250_UUID, MPU9250_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertMPU9250Data(data, function(x, y, z) {\n      callback(null, x, y, z);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2650SensorTag.prototype.onMPU9250Change = function(data) {\n  this.convertMPU9250Data(data, function(x, y, z, xG, yG, zG, xM, yM, zM) {\n    if (this.mpu9250mask & MPU9250_ACCELEROMETER_MASK) {\n      this.emit('accelerometerChange', x, y, z);\n    }\n\n    if (this.mpu9250mask & MPU9250_GYROSCOPE_MASK) {\n      this.emit('gyroscopeChange', xG, yG, zG);\n    }\n\n    if (this.mpu9250mask & MPU9250_MAGNETOMETER_MASK) {\n      this.emit('magnetometerChange', xM, yM, zM);\n    }\n  }.bind(this));\n};\n\nCC2650SensorTag.prototype.convertMPU9250Data = function(data, callback) {\n  // 250 deg/s range\n  var xG = data.readInt16LE(0) / 128.0;\n  var yG = data.readInt16LE(2) / 128.0;\n  var zG = data.readInt16LE(4) / 128.0;\n\n  // we specify 8G range in setup\n  var x = data.readInt16LE(6) / 4096.0;\n  var y = data.readInt16LE(8) / 4096.0;\n  var z = data.readInt16LE(10) / 4096.0;\n\n  // magnetometer (page 50 of http://www.invensense.com/mems/gyro/documents/RM-MPU-9250A-00.pdf)\n  var xM = data.readInt16LE(12) * 4912.0 / 32768.0;\n  var yM = data.readInt16LE(14) * 4912.0 / 32768.0;\n  var zM = data.readInt16LE(16) * 4912.0 / 32768.0;\n\n  callback(x, y, z, xG, yG, zG, xM, yM, zM);\n};\n\nCC2650SensorTag.prototype.notifyAccelerometer = function(callback) {\n  this.notifyMPU9250(callback);\n};\n\nCC2650SensorTag.prototype.unnotifyAccelerometer = function(callback) {\n  this.unnotifyMPU9250(callback);\n};\n\nCC2650SensorTag.prototype.setAccelerometerPeriod = function(period, callback) {\n  this.setMPU9250Period(period, callback);\n};\n\nCC2650SensorTag.prototype.enableMagnetometer = function(callback) {\n  this.enableMPU9250(MPU9250_MAGNETOMETER_MASK, callback);\n};\n\nCC2650SensorTag.prototype.disableMagnetometer = function(callback) {\n  this.disableMPU9250(MPU9250_MAGNETOMETER_MASK, callback);\n};\n\nCC2650SensorTag.prototype.readMagnetometer = function(callback) {\n  this.readDataCharacteristic(MPU9250_UUID, MPU9250_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertMPU9250Data(data, function(x, y, z, xG, yG, zG, xM, yM, zM) {\n      callback(null, xM, yM, zM);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2650SensorTag.prototype.notifyMagnetometer = function(callback) {\n  this.notifyMPU9250(callback);\n};\n\nCC2650SensorTag.prototype.unnotifyMagnetometer = function(callback) {\n  this.unnotifyMPU9250(callback);\n};\n\nCC2650SensorTag.prototype.setMagnetometerPeriod = function(period, callback) {\n  this.setMPU9250Period(period, callback);\n};\n\nCC2650SensorTag.prototype.setGyroscopePeriod = function(period, callback) {\n  this.setMPU9250Period(period, callback);\n};\n\nCC2650SensorTag.prototype.enableGyroscope = function(callback) {\n  this.enableMPU9250(MPU9250_GYROSCOPE_MASK, callback);\n};\n\nCC2650SensorTag.prototype.disableGyroscope = function(callback) {\n  this.disableMPU9250(MPU9250_GYROSCOPE_MASK, callback);\n};\n\nCC2650SensorTag.prototype.readGyroscope = function(callback) {\n  this.readDataCharacteristic(MPU9250_UUID, MPU9250_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertMPU9250Data(data, function(x, y, z, xG, yG, zG) {\n      callback(null, xG, yG, zG);\n    }.bind(this));\n  }.bind(this));\n};\n\nCC2650SensorTag.prototype.notifyGyroscope = function(callback) {\n  this.notifyMPU9250(callback);\n};\n\nCC2650SensorTag.prototype.unnotifyGyroscope = function(callback) {\n  this.unnotifyMPU9250(callback);\n};\n\nCC2650SensorTag.prototype.readIoData = function(callback) {\n  this.readUInt8Characteristic(IO_UUID, IO_DATA_UUID, callback);\n};\n\nCC2650SensorTag.prototype.writeIoData = function(value, callback) {\n  this.writeUInt8Characteristic(IO_UUID, IO_DATA_UUID, value, callback);\n};\n\nCC2650SensorTag.prototype.readIoConfig = function(callback) {\n  this.readUInt8Characteristic(IO_UUID, IO_CONFIG_UUID, callback);\n};\n\nCC2650SensorTag.prototype.writeIoConfig = function(value, callback) {\n  this.writeUInt8Characteristic(IO_UUID, IO_CONFIG_UUID, value, callback);\n};\n\nCC2650SensorTag.prototype.enableLuxometer = function(callback) {\n  this.enableConfigCharacteristic(LUXOMETER_UUID, LUXOMETER_CONFIG_UUID, callback);\n};\n\nCC2650SensorTag.prototype.disableLuxometer = function(callback) {\n  this.disableConfigCharacteristic(LUXOMETER_UUID, LUXOMETER_CONFIG_UUID, callback);\n};\n\nCC2650SensorTag.prototype.readLuxometer = function(callback) {\n  this.readDataCharacteristic(LUXOMETER_UUID, LUXOMETER_DATA_UUID, function(error, data) {\n    if (error) {\n      return callback(error);\n    }\n\n    this.convertLuxometerData(data, function(lux) {\n      callback(null, lux);\n    }.bind(this));\n  }.bind(this));\n };\n\nCC2650SensorTag.prototype.onLuxometerChange = function(data) {\n  this.convertLuxometerData(data, function(lux) {\n    this.emit('luxometerChange', lux);\n  }.bind(this));\n};\n\nCC2650SensorTag.prototype.convertLuxometerData = function(data, callback) {\n  var rawLux = data.readUInt16LE(0);\n\n  var exponent = (rawLux & 0xF000) >> 12;\n  var mantissa = (rawLux & 0x0FFF);\n\n  var flLux = mantissa * Math.pow(2, exponent) / 100.0;\n\n  callback(flLux);\n};\n\nCC2650SensorTag.prototype.notifyLuxometer = function(callback) {\n  this.notifyCharacteristic(LUXOMETER_UUID, LUXOMETER_DATA_UUID, true, this.onLuxometerChangeBinded, callback);\n};\n\nCC2650SensorTag.prototype.unnotifyLuxometer = function(callback) {\n  this.notifyCharacteristic(LUXOMETER_UUID, LUXOMETER_DATA_UUID, false, this.onLuxometerChangeBinded, callback);\n};\n\nCC2650SensorTag.prototype.setLuxometerPeriod = function(period, callback) {\n  this.writePeriodCharacteristic(LUXOMETER_UUID, LUXOMETER_PERIOD_UUID, period, callback);\n};\n\nCC2650SensorTag.prototype.convertSimpleKeyData = function(data, callback) {\n  var b = data.readUInt8(0);\n\n  var left = (b & 0x2) ? true : false;\n  var right = (b & 0x1) ? true : false;\n  var reedRelay = (b & 0x4) ? true : false;\n\n  callback(left, right, reedRelay);\n};\n\nmodule.exports = CC2650SensorTag;\n"}